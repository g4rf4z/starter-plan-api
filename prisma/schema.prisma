generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstname String
  lastname String
  email String @unique
  password String

  cart Cart? // [User] one-to-one [Cart]
  orders Order[] // [User] one-to-many [Order]
  sessions  Session[] // [User] one-to-many [Session]
  userProducts UserProduct[] // [User] one-to-many [UserProduct]

  @@map("users")
}

model UserProduct {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("user_products")
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  active Boolean @default(true)
  userAgent String?

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model ApiError {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status  Int
  type    ApiErrorType
  message String

  path    String
  userId  String?
  userIp  String?
  details String?
  raw     String?

  @@map("api_errors")
}

enum ApiErrorType {
  API
  DATABASE
  VALIDATION
}

model ResetPasswordToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  isValid Boolean @default(true)
  token String @unique

  userId String @db.ObjectId

  @@map("reset_password_tokens")
}

model Cart {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[] // [Cart] one-to-many [CartItem]

  userId String @unique @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quantity Int

  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartId String @db.ObjectId
  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status Status
  totalPrice Float

  orderItems OrderItem[] // [Order] one-to-many [OrderItem]

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

enum Status {
  PENDING
  CANCELED
  COMPLETED
}

model OrderItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quantity Int

  orderId String @db.ObjectId
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  description String
  price Float

  stripeProductId String
  stripePriceId String

  cartItems CartItem[] // [Product] one-to-many [CartItem]
  orderItems OrderItem[] // [Product] one-to-many [OrderItem]
  userProducts UserProduct[] // [Product] one-to-many [UserProduct]

  @@map("products")
}